# kafka target topics
# cocreation topics
digiwf.streaming.topics.cocreation.LOCAL=dwf-cocreation-local-01
digiwf.streaming.topics.cocreation.DEV=dwf-cocreation-dev
digiwf.streaming.topics.cocreation.TEST=dwf-cocreation-test
digiwf.streaming.topics.cocreation.DEMO=dwf-cocreation-demo
digiwf.streaming.topics.cocreation.PROCESSESTEST=dwf-cocreation-processestest
digiwf.streaming.topics.cocreation.PROCESSESDEMO=dwf-cocreation-processesdemo
digiwf.streaming.topics.cocreation.PROCESSESHOTFIX=dwf-cocreation-processeshotfix
# cocreation-deploy topics
digiwf.streaming.topics.cocreationDeploy.LOCAL=dwf-cocreation-deploy-local-01
digiwf.streaming.topics.cocreationDeploy.DEV=dwf-cocreation-deploy-dev
digiwf.streaming.topics.cocreationDeploy.TEST=dwf-cocreation-deploy-test
digiwf.streaming.topics.cocreationDeploy.DEMO=dwf-cocreation-deploy-demo
digiwf.streaming.topics.cocreationDeploy.PROCESSESTEST=dwf-cocreation-deploy-processestest
digiwf.streaming.topics.cocreationDeploy.PROCESSESDEMO=dwf-cocreation-deploy-processesdemo
digiwf.streaming.topics.cocreationDeploy.PROCESSESHOTFIX=dwf-cocreation-deploy-processeshotfix

spring.cloud.stream.kafka.binder.brokers=localhost:29092
spring.cloud.stream.default-binder=kafka
spring.cloud.stream.kafka.binder.configuration.security.protocol=PLAINTEXT

#Kafka Config
spring.cloud.stream.kafka.binder.consumerProperties.key.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.consumerProperties.value.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.producerProperties.key.serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.cloud.stream.kafka.binder.producerProperties.value.serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.cloud.stream.kafka.binder.consumerProperties.auto.offset.reset=latest

spring.cloud.function.definition=deployArtifact;deploymentStatus;
spring.cloud.stream.bindings.deploymentStatus-in-0.destination=${digiwf.streaming.cocreationDeploy.topic}
spring.cloud.stream.bindings.deploymentStatus-in-0.group=${digiwf.streaming.group}
spring.cloud.stream.bindings.deployArtifact-out-0.producer.auto-startup=true

#DLQ Config -> only possible if group for functionRouter is set
spring.cloud.stream.default.consumer.maxAttempts=1
spring.cloud.stream.kafka.default.consumer.dlqName=${digiwf.streaming.cocreationDeployDLQ.topic}
spring.cloud.stream.kafka.default.consumer.enableDlq=true

# asyncapi docs
io.muenchendigital.digiwf.docs.enabled=true
io.muenchendigital.digiwf.docs.basePackage=de.muenchen.digiwf.bpm.server
io.muenchendigital.digiwf.docs.version=1.0.0
io.muenchendigital.digiwf.docs.title=bpm-server
