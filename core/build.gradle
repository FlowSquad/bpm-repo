compileJava {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring'
    ]
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {

    // REST-Resource related Dependencies
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly "org.springframework.boot:spring-boot-starter-data-jpa"
    // Mapping
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    compileOnly 'org.springdoc:springdoc-openapi-ui:1.5.9'

    //Commons
    implementation 'commons-io:commons-io:2.7'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation "org.springframework.boot:spring-boot-starter-data-jpa"
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'com.h2database:h2:1.3.148'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        publishCore(MavenPublication) {
            from components.java
            groupId 'io.miragon.bpmrepo.citest'
            artifactId 'core'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'miragon bpm repo core')
                root.appendNode('name', 'bpm-repo-core')
                root.appendNode('url', 'https://github.com/FlowSquad/bpm-repo/tree/master/core')
                root.children().last() + pomConfig
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.publishCore
}

